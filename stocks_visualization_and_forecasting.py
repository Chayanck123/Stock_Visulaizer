# -*- coding: utf-8 -*-
"""Stocks Visualization and Forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ryc41Llrgd-y6gqcE6VdMn3831ZRz5k5

Stocks Visualization and FOrecasting using LSTM Model
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import yahoo_fin.stock_info as si

ticker = input("Enter ticker symbol: ")

start = datetime(2010, 1, 1)
end = datetime(2019, 12, 31)

df = si.get_data(ticker, start_date=start, end_date=end)

df['Date'] = df.index
df['Adj Close'] = df['close']

df.head()

df.tail()

df = df.reset_index()
df.head()

df = df.drop(['index', 'ticker', 'adjclose'], axis=1)
df.head()

plt.plot(df.close)

df

ma100 = df.close.rolling(100).mean()
ma100

plt.figure(figsize=(12, 6))
plt.plot(df.close)
plt.plot(ma100, 'red')

ma200 = df.close.rolling(200).mean()
ma200

plt.figure(figsize=(12, 6))
plt.plot(df.close)
plt.plot(ma100, 'red')
plt.plot(ma200, 'green')

df.shape

# Splitting Data into Training and Testing sets

data_training = pd.DataFrame(df['close'][0:int(len(df) * 0.70)])
data_testing = pd.DataFrame(df['close'][int(len(df) * 0.70): int(len(df))])

print(data_training.shape, data_testing.shape)

data_training.head()

data_testing.head()

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0, 1))

data_training_array = scaler.fit_transform(data_training)
data_training_array

data_training_array.shape

x_train = []
y_train = []
for i in range(100, data_training.shape[0]):
    x_train.append(data_training_array[i - 100: i])
    y_train.append(data_training_array[i, 0])

x_train, y_train = np.array(x_train), np.array(y_train)

x_train.shape

# ML Model(LSTM)
from keras.layers import Dense, Dropout, LSTM
from keras.models import Sequential

model = Sequential()
model.add(LSTM(units=50, activation='relu', return_sequences=True,
               input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units=60, activation='relu', return_sequences=True))
model.add(Dropout(0.3))

model.add(LSTM(units=80, activation='relu', return_sequences=True))
model.add(Dropout(0.4))

model.add(LSTM(units=120, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(units=1))

model.summary()

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, epochs=50)

model.save('keras_model.h5')

data_testing.head()

data_training.tail(100)

past_100_days = data_training.tail(100)

final_df = past_100_days.append(data_testing, ignore_index=True)

final_df.head()

input_data = scaler.fit_transform(final_df)
input_data

input_data.shape

x_test = []
y_test = []

for i in range(100, input_data.shape[0]):
  x_test.append(input_data[i-100: i])
  y_test.append(input_data[i, 0])

x_test, y_test = np.array(x_test), np.array(y_test)
print(x_test.shape)
print(y_test.shape)

#Making Predictions

y_predicted = model.predict(x_test)

y_predicted.shape

y_test

y_predicted

scaler.scale_

scale_factor = 1/0.02099517
y_predicted = y_predicted * scale_factor
y_test = y_test * scale_factor

plt.figure(figsize = (12, 6))
plt.plot(y_test, 'b', label = 'Original Price')
plt.plot(y_predicted, 'r', label = 'Predicted Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()

